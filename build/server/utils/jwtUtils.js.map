{"version":3,"sources":["utils/jwtUtils.js"],"names":["sign","data","pass","payload","sub","token","verify","callback","err","decoded","module","exports"],"mappings":";;AAAA;;;;;;AAEA;;;;;AAKA,SAASA,IAAT,CAAcC,IAAd,EAAoBC,IAApB,EAA0B;AACxB,MAAMC,UAAU;AACdC,SAAKH;AADS,GAAhB;AAGA,MAAMI,QAAQ,uBAAIL,IAAJ,CAASG,OAAT,EAAkBD,IAAlB,CAAd;AACA,SAAOG,KAAP;AACD;;AAED;;;;;;AAMA,SAASC,MAAT,CAAgBD,KAAhB,EAAuBH,IAAvB,EAA6BK,QAA7B,EAAuC;AACrC,yBAAID,MAAJ,CAAWD,KAAX,EAAkBH,IAAlB,EAAwB,UAACM,GAAD,EAAMC,OAAN,EAAkB;AACxC,QAAID,GAAJ,EAAS,OAAOD,SAASC,GAAT,CAAP;;AAET,QAAMP,OAAOQ,QAAQL,GAArB;AACA,WAAOG,SAAS,IAAT,EAAeN,IAAf,CAAP;AACD,GALD;AAMD;;AAEDS,OAAOC,OAAP,GAAiB;AACfX,YADe;AAEfM;AAFe,CAAjB","file":"jwtUtils.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\n/**\n * sign a jsonwebtoken token\n * @param {string} data - data\n * @param {string} pass - secret\n */\nfunction sign(data, pass) {\n  const payload = {\n    sub: data,\n  };\n  const token = jwt.sign(payload, pass);\n  return token;\n}\n\n/**\n * verify a jsonwebtoken\n * @param {string} token - web token\n * @param {string} pass - token secret\n * @params {function} callback - callback function\n */\nfunction verify(token, pass, callback) {\n  jwt.verify(token, pass, (err, decoded) => {\n    if (err) return callback(err);\n\n    const data = decoded.sub;\n    return callback(null, data);\n  });\n}\n\nmodule.exports = {\n  sign,\n  verify,\n};\n"]}