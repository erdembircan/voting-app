{"version":3,"sources":["utils/index.js"],"names":["parseStringToObject","value","joinChar","parsedObj","parsedDataOne","split","map","part","temp","nonce","length","text","possible","i","charAt","Math","floor","random","flashRead","req","key","session","undefined","flashWrite","generateColors","amount","rand","tempArray","push","renderToLayout","layout","partial","layoutParams","mainBody","error","message","module","exports"],"mappings":";;AAAA;;;;;;AAMA,SAASA,mBAAT,CAA6BC,KAA7B,EAAoCC,QAApC,EAA8C;AAC5C,MAAMC,YAAY,EAAlB;;AAEA,MAAMC,gBAAgBH,MAAMI,KAAN,CAAYH,QAAZ,CAAtB;;AAEAE,gBAAcE,GAAd,CAAkB,UAACC,IAAD,EAAU;AAC1B,QAAMC,OAAOD,KAAKF,KAAL,CAAW,GAAX,CAAb;AACAF,cAAUK,KAAK,CAAL,CAAV,IAAqBA,KAAK,CAAL,CAArB;AACD,GAHD;;AAKA,SAAOL,SAAP;AACD;;AAED;;;;;AAKA,SAASM,KAAT,CAAeC,MAAf,EAAuB;AACrB,MAAIC,OAAO,EAAX;;AAEA,MAAMC,WAAW,gEAAjB;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC;AAC/BF,YAAQC,SAASE,MAAT,CAAgBC,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgBL,SAASF,MAApC,CAAhB,CAAR;AACD;;AAED,SAAOC,IAAP;AACD;;AAED;;;;;;AAMA,SAASO,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;AAC3B,MAAMnB,QAAQkB,IAAIE,OAAJ,CAAYD,GAAZ,CAAd;AACAD,MAAIE,OAAJ,CAAYD,GAAZ,IAAmBE,SAAnB;AACA,SAAOrB,KAAP;AACD;;AAED;;;;;;AAMA,SAASsB,UAAT,CAAoBJ,GAApB,EAAyBC,GAAzB,EAA8BnB,KAA9B,EAAqC;AACnCkB,MAAIE,OAAJ,CAAYD,GAAZ,IAAmBnB,KAAnB;AACD;;AAED;;;;;AAKA,SAASuB,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,MAAMC,OAAO,SAAPA,IAAO;AAAA,WAAMX,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,GAA3B,CAAN;AAAA,GAAb;AACA,MAAMU,YAAY,EAAlB;AACA,OAAK,IAAId,IAAI,CAAb,EAAgBA,IAAIY,MAApB,EAA4BZ,GAA5B,EAAiC;AAC/Bc,cAAUC,IAAV,UAAsBF,MAAtB,SAAgCA,MAAhC,SAA0CA,MAA1C;AACD;;AAED,SAAOC,SAAP;AACD;;AAGD,SAASE,cAAT,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyCZ,GAAzC,EAAiE;AAAA,MAAnBa,YAAmB,uEAAJ,EAAI;;AAC/DA,eAAaC,QAAb,GAAwBF,OAAxB;AACAC,eAAaE,KAAb,GAAqBhB,UAAUC,GAAV,EAAe,OAAf,CAArB;AACAa,eAAaG,OAAb,GAAuBjB,UAAUC,GAAV,EAAe,SAAf,CAAvB;AACA,SAAOW,OAAOE,YAAP,CAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiB;AACfrC,0CADe;AAEfS,cAFe;AAGfS,sBAHe;AAIfM,gCAJe;AAKfD,wBALe;AAMfM;AANe,CAAjB","file":"index.js","sourcesContent":["/**\n * parse a string joined with a char into an key/value object\n * @param {string} value - value\n * @param {string} joinChar - char that joined the pairs together\n * @returns {object} - parsed object\n */\nfunction parseStringToObject(value, joinChar) {\n  const parsedObj = {};\n\n  const parsedDataOne = value.split(joinChar);\n\n  parsedDataOne.map((part) => {\n    const temp = part.split('=');\n    parsedObj[temp[0]] = temp[1];\n  });\n\n  return parsedObj;\n}\n\n/**\n * generate a unique string with a given length\n * @param {number} length - length of unique string\n * @returns {string} - unique string\n */\nfunction nonce(length) {\n  let text = '';\n\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n  for (let i = 0; i < length; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n\n  return text;\n}\n\n/**\n * read session data and then remove it from session\n * @param {object} req - request object\n * @param {string} key - session property name\n * @returns {string} - session property value\n */\nfunction flashRead(req, key) {\n  const value = req.session[key];\n  req.session[key] = undefined;\n  return value;\n}\n\n/**\n * write flash messages to session\n * @param {object} req -request object\n * @param {string} key - key\n * @param {string} value - value\n */\nfunction flashWrite(req, key, value) {\n  req.session[key] = value;\n}\n\n/**\n * generate array of random rgb colors\n * @param {number} amount - array length\n * @return {array} - color array\n */\nfunction generateColors(amount) {\n  const rand = () => Math.floor(Math.random() * 255);\n  const tempArray = [];\n  for (let i = 0; i < amount; i++) {\n    tempArray.push(`rgb(${rand()},${rand()},${rand()})`);\n  }\n\n  return tempArray;\n}\n\n\nfunction renderToLayout(layout, partial, req, layoutParams = {}) {\n  layoutParams.mainBody = partial;\n  layoutParams.error = flashRead(req, 'error');\n  layoutParams.message = flashRead(req, 'message');\n  return layout(layoutParams);\n}\n\nmodule.exports = {\n  parseStringToObject,\n  nonce,\n  flashRead,\n  generateColors,\n  flashWrite,\n  renderToLayout,\n};\n"]}