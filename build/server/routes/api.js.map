{"version":3,"sources":["routes/api.js"],"names":["router","Router","Poll","require","model","Voters","post","redirectUrl","error","smileyUnamused","req","res","items","Object","keys","body","map","key","includes","redirect","newPoll","title","voters","save","err","savedData","pollId","_id","sessionIds","voter","smileyHeart","query","id","item","session","send","findOne","then","found","smileyFrown","poll","saved","push","catch","console","log","get","next","find","resp","params","module","exports"],"mappings":"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","file":"api.js","sourcesContent":["import express from 'express';\nimport { flashWrite, parseStringToObject } from '../utils';\nimport authenticate from '../middleware/authentication';\nimport { emoji } from '../utils/emoji';\n\nconst router = new express.Router();\nconst Poll = require('mongoose').model('Poll');\nconst Voters = require('mongoose').model('Voters');\n\nrouter.post(\n  '/createpoll',\n  authenticate({ redirectUrl: '/', error: `you need to be logged in ${emoji.smileyUnamused}` }),\n  (req, res) => {\n    const items = {};\n\n    Object.keys(req.body).map((key) => {\n      if (key.includes('item')) {\n        items[req.body[key]] = 1;\n      }\n    });\n\n    if (items === {}) {\n      flashWrite(req, 'error', 'error creating poll :(');\n      return res.redirect('/');\n    }\n\n    const newPoll = new Poll({\n      title: req.body.title,\n      items,\n      voters: ['some dude'],\n    });\n\n    newPoll.save((err, savedData) => {\n      const voters = new Voters({\n        pollId: savedData._id,\n        sessionIds: [],\n      });\n\n      voters.save((err, voter) => {\n        if (err) {\n          flashWrite(req, 'error', 'error creating poll :(');\n          return res.redirect('/');\n        }\n\n        flashWrite(req, 'message', `poll created ${emoji.smileyHeart}`);\n        return res.redirect(`/poll/${savedData._id}`);\n      });\n    });\n  },\n);\n\nrouter.post('/vote', (req, res) => {\n  const { id, item } = req.query;\n  if (!req.session.id) {\n    flashWrite(req, 'error', 'no session id found');\n    return res.send(null);\n  }\n  Voters.findOne({ pollId: id || 0 })\n    .then((found) => {\n      const voters = found.sessionIds;\n\n      if (voters.includes(req.session.id)) {\n        flashWrite(req, 'error', `you already voted for that poll ${emoji.smileyFrown}`);\n        return res.send(null);\n      }\n\n      Poll.findOne({ _id: id }, (err, poll) => {\n        if (err) return null;\n        const items = poll.items;\n        if (!items[item]) {\n          flashWrite(req, 'error', `could not vote ${emoji.smileyFrown}`);\n          return res.send(saved);\n        }\n        items[item]++;\n        poll.items = {};\n        poll.items = items;\n        poll.save((err, saved) => {\n          if (err) {\n            flashWrite(req, 'error', `could not vote ${emoji.smileyFrown}`);\n            return res.send(saved);\n          }\n          flashWrite(req, 'message', `voted ${emoji.smileyHeart}`);\n\n          found.sessionIds.push(req.session.id);\n          found.save((err, saved) => res.send(saved));\n        });\n      });\n    })\n    .catch((err) => {\n      console.log(err);\n      flashWrite(req, 'error', 'an error occured, try again later');\n      return res.send(null);\n    });\n});\n\nrouter.get('/polls/all', (req, res, next) => {\n  Poll.find({}, (err, resp) => {\n    if (err) {\n      console.log(err);\n      flashWrite(req, 'error', 'an error occured');\n      return res.redirect('/');\n    }\n    res.send(resp);\n  });\n});\nrouter.get('/polls/:id', (req, res, next) => {\n  Poll.findOne({ _id: req.params.id }, (err, resp) => {\n    if (err) return res.redirect('/');\n    res.send(resp);\n  });\n});\n\nmodule.exports = router;\n"]}