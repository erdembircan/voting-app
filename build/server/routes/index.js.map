{"version":3,"sources":["routes/index.js"],"names":["require","User","model","Poll","router","Router","get","req","res","sendStatus","send","userName","session","user","name","error","smileyUnamused","redirectUrl","next","authString","callback","consumer_key","nonce","signature_method","config","headers","Authorization","post","then","resp","data","parsedObj","oauth_callback_confirmed","oauth_token","oauth_token_secret","redirect","encodeURIComponent","catch","err","sessionToken","receivedToken","query","sessionTokenSecret","token","body","oauth_verifier","tokenSecret","content","newUser","password","save","code","findOne","findErr","userData","payload","_id","cookie","maxAge","smileyBig","method","url","avatar","profile_image_url","params","id","smileyFrown","pollTitle","title","endsWith","cookies","clearCookie","undefined"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\nimport axios from 'axios';\nimport mainLayout from '../templates/layouts/main.js';\nimport mainTemp from '../templates/index.js';\nimport authResp from '../templates/auth_res.js';\nimport pollTemp from '../templates/poll.js';\nimport createPollTemp from '../templates/createPoll.js';\nimport createAuthString from '../utils/twitterAuth';\nimport sData from '../sData';\nimport { parseStringToObject, nonce, flashRead, flashWrite, renderToLayout } from '../utils';\nimport { sign } from '../utils/jwtUtils';\nimport authenticate from '../middleware/authentication';\nimport { emoji } from '../utils/emoji';\n\nrequire('../models/user');\nrequire('../models/poll');\nrequire('../models/voters');\nconst User = require('mongoose').model('User');\nconst Poll = require('mongoose').model('Poll');\n\nconst router = express.Router();\n\nrouter.get('/favicon.ico', (req, res) => {\n  res.sendStatus(203);\n});\n\nrouter.get('/', (req, res) => {\n  res.send(renderToLayout(\n    mainLayout,\n    mainTemp({ userName: req.session.user ? req.session.user.name : '' }),\n    req,\n    {\n      user: req.session.user,\n    },\n  ));\n});\n\nrouter.get(\n  '/createpoll',\n  authenticate({ error: `you need to be logged in ${emoji.smileyUnamused}`, redirectUrl: '/' }),\n  (req, res, next) => {\n    res.send(renderToLayout(mainLayout, createPollTemp(), req, {\n      user: req.session.user,\n    }));\n  },\n);\n\n\nrouter.get('/login', (req, res, next) => {\n  const authString = createAuthString(\n    {\n      callback: 'https://intense-dusk-58236.herokuapp.com/sign-in-with-twitter/',\n      consumer_key: sData['twitter-consumer-key'],\n      nonce: nonce(42),\n      signature_method: 'HMAC-SHA1',\n    },\n    'post',\n    'https://api.twitter.com/oauth/request_token',\n  );\n\n  const config = {\n    headers: { Authorization: authString },\n  };\n\n  axios\n    .post('https://api.twitter.com/oauth/request_token', {}, config)\n    .then((resp) => {\n      const { data } = resp;\n      const parsedObj = parseStringToObject(data, '&');\n\n      if (parsedObj.oauth_callback_confirmed === 'true') {\n        flashWrite(req, 'oauth_token', parsedObj.oauth_token);\n        flashWrite(req, 'oauth_token_secret', parsedObj.oauth_token_secret);\n        res.redirect(\n          302,\n          `https://api.twitter.com/oauth/authenticate?oauth_token=${encodeURIComponent(parsedObj.oauth_token)}`,\n        );\n      }\n    })\n    .catch((err) => {\n      next(err);\n    });\n});\n\nrouter.get('/sign-in-with-twitter', (req, res, next) => {\n  const sessionToken = flashRead(req, 'oauth_token');\n  const receivedToken = req.query.oauth_token;\n  const sessionTokenSecret = flashRead(req, 'oauth_token_secret');\n\n  if (sessionToken === receivedToken) {\n    const authString = createAuthString(\n      {\n        consumer_key: sData['twitter-consumer-key'],\n        nonce: nonce(42),\n        signature_method: 'HMAC-SHA1',\n        token: sessionToken,\n        body: `oauth_verifier=${req.query.oauth_verifier}`,\n        tokenSecret: sessionTokenSecret,\n      },\n      'post',\n      'https://api.twitter.com/oauth/access_token',\n    );\n\n    const config = {\n      headers: { Authorization: authString },\n    };\n\n    const content = `oauth_verifier= ${req.query.oauth_verifier}`;\n    axios\n      .post('https://api.twitter.com/oauth/access_token', content, config)\n      .then((resp) => {\n        const { data } = resp;\n        const parsedObj = parseStringToObject(data, '&');\n\n        const newUser = new User({\n          password: nonce(42),\n          token: parsedObj.oauth_token,\n          tokenSecret: parsedObj.oauth_token_secret,\n        });\n\n        newUser.save((err, save) => {\n          if (err && err.code !== 11000) next(err);\n          User.findOne({ token: newUser.token }, (findErr, userData) => {\n            if (findErr) next(findErr);\n            const payload = sign(userData._id, sData['jwt-secret']);\n            res.cookie('auth.loc', payload, { maxAge: 30 * 24 * 60 * 60 * 1000 });\n            flashWrite(req, 'message', `log in successfull ${emoji.smileyBig}`);\n\n            // prepare for fetching user details from twitter\n            const authString = createAuthString(\n              {\n                consumer_key: sData['twitter-consumer-key'],\n                nonce: nonce(42),\n                signature_method: 'HMAC-SHA1',\n                token: userData.token,\n                tokenSecret: userData.tokenSecret,\n              },\n              'get',\n              'https://api.twitter.com/1.1/account/verify_credentials.json',\n            );\n\n            axios({\n              method: 'get',\n              url: 'https://api.twitter.com/1.1/account/verify_credentials.json',\n              headers: { Authorization: authString },\n            })\n              .then((resp) => {\n                req.session.user = {\n                  avatar: resp.data.profile_image_url,\n                  name: resp.data.name,\n                };\n\n                res.redirect('/auth_resp');\n              })\n              .catch((err) => {\n                next(err);\n              });\n          });\n        });\n      })\n      .catch((err) => {\n        next(err);\n      });\n  } else next('token missmatch, try again later');\n});\n\nrouter.get('/poll/:id', (req, res) => {\n  Poll.findOne({ _id: req.params.id }, (err, resp) => {\n    if (err) {\n      flashWrite(req, 'error', `invalid poll id ${emoji.smileyFrown}`);\n      return res.redirect('/');\n    }\n\n    let pollTitle = resp.title;\n    pollTitle += pollTitle.endsWith('?') ? '' : '?';\n    res.send(renderToLayout(mainLayout, pollTemp({ id: req.params.id, pollTitle }), req, {\n      user: req.session.user,\n    }));\n  });\n});\n\nrouter.get('/auth_resp', (req, res) => {\n  res.send(authResp());\n});\n\nrouter.get('/logout', (req, res) => {\n  if (req.cookies['auth.loc']) res.clearCookie('auth.loc');\n  flashWrite(req, 'message', `logged out ${emoji.smileyUnamused}`);\n  req.session.user = undefined;\n  res.redirect('/');\n});\n\nexport default router;\n"]}